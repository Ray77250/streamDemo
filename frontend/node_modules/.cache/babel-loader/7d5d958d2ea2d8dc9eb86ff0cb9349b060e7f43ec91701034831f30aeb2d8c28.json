{"ast":null,"code":"import React from 'react';\nimport Step from '../components/Step';\nimport Think from '../components/Think';\nimport Text from '../components/Text';\nimport Reply from '../components/Reply';\nclass ComponentManager {\n  constructor() {\n    this.components = [];\n    this.listeners = [];\n    this.updateTimer = null; // 防抖定时器\n    this.pendingUpdates = new Map(); // 待处理的更新\n  }\n\n  // 添加监听器\n  addListener(callback) {\n    this.listeners.push(callback);\n    return () => {\n      this.listeners = this.listeners.filter(listener => listener !== callback);\n    };\n  }\n\n  // 通知所有监听器\n  notifyListeners() {\n    this.listeners.forEach(callback => callback(this.components));\n  }\n\n  // 处理新消息\n  handleNewMessage(data) {\n    const componentType = data.type;\n    if (!['step', 'think', 'text', 'reply'].includes(componentType)) {\n      return;\n    }\n\n    // 一次性遍历查找：优先查找相同msg_id的组件，其次查找未完成的同类型组件\n    let existingComponentIndex = -1;\n    let activeComponentIndex = -1;\n    for (let i = this.components.length - 1; i >= 0; i--) {\n      const comp = this.components[i];\n\n      // 如果找到相同msg_id的组件，优先使用\n      if (comp.data.msg_id === data.msg_id) {\n        existingComponentIndex = i;\n        break;\n      }\n\n      // 记录最后一个未完成的同类型组件\n      if (activeComponentIndex === -1 && comp.type === componentType && !comp.isFinished) {\n        activeComponentIndex = i;\n      }\n    }\n    if (existingComponentIndex >= 0) {\n      var _data$content;\n      // 更新现有组件\n      this.components[existingComponentIndex].data = data;\n      this.components[existingComponentIndex].isFinished = ((_data$content = data.content) === null || _data$content === void 0 ? void 0 : _data$content.is_finished) || false;\n    } else if (activeComponentIndex >= 0) {\n      var _data$content2;\n      // 更新最后一个未完成的同类型组件\n      this.components[activeComponentIndex] = {\n        ...this.components[activeComponentIndex],\n        data: data,\n        isFinished: ((_data$content2 = data.content) === null || _data$content2 === void 0 ? void 0 : _data$content2.is_finished) || false\n      };\n    } else {\n      var _data$content3;\n      // 创建新组件\n      this.components.push({\n        id: `${data.msg_id}_${Date.now()}`,\n        type: componentType,\n        data: data,\n        isFinished: ((_data$content3 = data.content) === null || _data$content3 === void 0 ? void 0 : _data$content3.is_finished) || false\n      });\n    }\n    this.notifyListeners();\n  }\n\n  // 清空所有组件\n  clearComponents() {\n    this.components = [];\n    this.notifyListeners();\n  }\n\n  // 渲染组件\n  renderComponent(component) {\n    const commonProps = {\n      data: component.data,\n      isFinished: component.isFinished,\n      onComplete: () => this.handleComponentComplete(component.id)\n    };\n    switch (component.type) {\n      case 'step':\n        return /*#__PURE__*/React.createElement(Step, {\n          key: component.id,\n          ...commonProps\n        });\n      case 'think':\n        return /*#__PURE__*/React.createElement(Think, {\n          key: component.id,\n          ...commonProps\n        });\n      case 'text':\n        return /*#__PURE__*/React.createElement(Text, {\n          key: component.id,\n          ...commonProps\n        });\n      case 'reply':\n        return /*#__PURE__*/React.createElement(Reply, {\n          key: component.id,\n          ...commonProps\n        });\n      default:\n        return null;\n    }\n  }\n\n  // 处理组件完成\n  handleComponentComplete(componentId) {\n    console.log(`组件 ${componentId} 完成`);\n  }\n\n  // 获取所有组件\n  getComponents() {\n    return this.components;\n  }\n}\n\n// 创建单例实例\nconst componentManager = new ComponentManager();\nexport default componentManager;","map":{"version":3,"names":["React","Step","Think","Text","Reply","ComponentManager","constructor","components","listeners","updateTimer","pendingUpdates","Map","addListener","callback","push","filter","listener","notifyListeners","forEach","handleNewMessage","data","componentType","type","includes","existingComponentIndex","activeComponentIndex","i","length","comp","msg_id","isFinished","_data$content","content","is_finished","_data$content2","_data$content3","id","Date","now","clearComponents","renderComponent","component","commonProps","onComplete","handleComponentComplete","createElement","key","componentId","console","log","getComponents","componentManager"],"sources":["/Users/tal/Desktop/streaming/frontend/src/services/componentManager.js"],"sourcesContent":["import React from 'react';\nimport Step from '../components/Step';\nimport Think from '../components/Think';\nimport Text from '../components/Text';\nimport Reply from '../components/Reply';\n\nclass ComponentManager {\n  constructor() {\n    this.components = [];\n    this.listeners = [];\n    this.updateTimer = null; // 防抖定时器\n    this.pendingUpdates = new Map(); // 待处理的更新\n  }\n\n  // 添加监听器\n  addListener(callback) {\n    this.listeners.push(callback);\n    return () => {\n      this.listeners = this.listeners.filter(listener => listener !== callback);\n    };\n  }\n\n  // 通知所有监听器\n  notifyListeners() {\n    this.listeners.forEach(callback => callback(this.components));\n  }\n\n  // 处理新消息\n  handleNewMessage(data) {\n    const componentType = data.type;\n    \n    if (!['step', 'think', 'text', 'reply'].includes(componentType)) {\n      return;\n    }\n\n    // 一次性遍历查找：优先查找相同msg_id的组件，其次查找未完成的同类型组件\n    let existingComponentIndex = -1;\n    let activeComponentIndex = -1;\n    \n    for (let i = this.components.length - 1; i >= 0; i--) {\n      const comp = this.components[i];\n      \n      // 如果找到相同msg_id的组件，优先使用\n      if (comp.data.msg_id === data.msg_id) {\n        existingComponentIndex = i;\n        break;\n      }\n      \n      // 记录最后一个未完成的同类型组件\n      if (activeComponentIndex === -1 && comp.type === componentType && !comp.isFinished) {\n        activeComponentIndex = i;\n      }\n    }\n\n    if (existingComponentIndex >= 0) {\n      // 更新现有组件\n      this.components[existingComponentIndex].data = data;\n      this.components[existingComponentIndex].isFinished = data.content?.is_finished || false;\n    } else if (activeComponentIndex >= 0) {\n      // 更新最后一个未完成的同类型组件\n      this.components[activeComponentIndex] = {\n        ...this.components[activeComponentIndex],\n        data: data,\n        isFinished: data.content?.is_finished || false\n      };\n    } else {\n      // 创建新组件\n      this.components.push({\n        id: `${data.msg_id}_${Date.now()}`,\n        type: componentType,\n        data: data,\n        isFinished: data.content?.is_finished || false\n      });\n    }\n\n    this.notifyListeners();\n  }\n\n  // 清空所有组件\n  clearComponents() {\n    this.components = [];\n    this.notifyListeners();\n  }\n\n  // 渲染组件\n  renderComponent(component) {\n    const commonProps = {\n      data: component.data,\n      isFinished: component.isFinished,\n      onComplete: () => this.handleComponentComplete(component.id)\n    };\n\n    switch (component.type) {\n      case 'step':\n        return React.createElement(Step, { key: component.id, ...commonProps });\n      case 'think':\n        return React.createElement(Think, { key: component.id, ...commonProps });\n      case 'text':\n        return React.createElement(Text, { key: component.id, ...commonProps });\n      case 'reply':\n        return React.createElement(Reply, { key: component.id, ...commonProps });\n      default:\n        return null;\n    }\n  }\n\n  // 处理组件完成\n  handleComponentComplete(componentId) {\n    console.log(`组件 ${componentId} 完成`);\n  }\n\n  // 获取所有组件\n  getComponents() {\n    return this.components;\n  }\n}\n\n// 创建单例实例\nconst componentManager = new ComponentManager();\n\nexport default componentManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}