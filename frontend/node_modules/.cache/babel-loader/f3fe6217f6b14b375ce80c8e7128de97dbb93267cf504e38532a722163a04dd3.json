{"ast":null,"code":"var _jsxFileName = \"/Users/tal/Desktop/streaming/frontend/src/components/Think.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, memo } from 'react';\nimport './Think.css';\nimport Search from './Search';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Think = ({\n  data,\n  isFinished,\n  onComplete\n}) => {\n  _s();\n  const [displayText, setDisplayText] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [hasSearch, setHasSearch] = useState(false);\n  const [searchData, setSearchData] = useState(null);\n  const [isCollapsed, setIsCollapsed] = useState(false);\n  const [shouldAutoCollapse, setShouldAutoCollapse] = useState(false);\n  const [isLocked, setIsLocked] = useState(false); // 标记组件是否已锁定，不再响应外部更新\n  const lastProcessedMsgIdRef = useRef('');\n  const collapseStateRef = useRef(false); // 用于持久化展开/收缩状态\n\n  // 打字机效果相关状态\n  const [textQueue, setTextQueue] = useState(''); // 待显示的文本队列\n  const typewriterTimerRef = useRef(null); // 打字机定时器\n\n  // 同步ref和state，确保状态持久化\n  useEffect(() => {\n    setIsCollapsed(collapseStateRef.current);\n  }, []);\n  useEffect(() => {\n    // 如果组件已锁定，不再处理新数据\n    if (isLocked) {\n      return;\n    }\n    if (data && data.content && data.msg_id) {\n      const content = data.content.content || '';\n      const type = data.content.type;\n\n      // 只有当消息ID不同时才处理，避免重复处理同一消息\n      if (lastProcessedMsgIdRef.current !== data.msg_id) {\n        lastProcessedMsgIdRef.current = data.msg_id;\n\n        // 如果遇到search类型，记录并保存search数据\n        if (type === 'search') {\n          setHasSearch(true);\n          setSearchData(data.content);\n        }\n\n        // 处理search类型的content内容\n        if (type === 'search' && content) {\n          // 将search内容传递给Search组件进行追加\n          setSearchData(prev => ({\n            ...prev,\n            content: ((prev === null || prev === void 0 ? void 0 : prev.content) || '') + content\n          }));\n        }\n\n        // 处理非search类型的消息\n        if (content && type !== 'search') {\n          addTextToQueue(content);\n        }\n      }\n    }\n  }, [data, isTyping, isLocked]);\n  useEffect(() => {\n    var _data$content;\n    if (isFinished && data !== null && data !== void 0 && (_data$content = data.content) !== null && _data$content !== void 0 && _data$content.is_finished) {\n      // 清理打字机定时器\n      if (typewriterTimerRef.current) {\n        clearInterval(typewriterTimerRef.current);\n        typewriterTimerRef.current = null;\n      }\n      setIsTyping(false);\n      setShouldAutoCollapse(true);\n      setIsLocked(true); // 锁定组件，不再响应外部更新\n      if (onComplete) {\n        onComplete();\n      }\n    }\n  }, [isFinished, data, onComplete]);\n\n  // 组件卸载时清理定时器\n  useEffect(() => {\n    return () => {\n      if (typewriterTimerRef.current) {\n        clearInterval(typewriterTimerRef.current);\n      }\n    };\n  }, []);\n\n  // 思考完成后自动折叠\n  useEffect(() => {\n    if (shouldAutoCollapse) {\n      const timer = setTimeout(() => {\n        setIsCollapsed(true);\n        collapseStateRef.current = true; // 同时更新ref\n        setShouldAutoCollapse(false);\n      }, 1000); // 1秒后自动折叠\n      return () => clearTimeout(timer);\n    }\n  }, [shouldAutoCollapse]);\n\n  // 逐字打字机效果\n  const startTypewriter = useCallback(() => {\n    if (typewriterTimerRef.current) {\n      clearInterval(typewriterTimerRef.current);\n    }\n    setIsTyping(true);\n    typewriterTimerRef.current = setInterval(() => {\n      setTextQueue(prevQueue => {\n        if (prevQueue.length === 0) {\n          setIsTyping(false);\n          clearInterval(typewriterTimerRef.current);\n          typewriterTimerRef.current = null;\n          return '';\n        }\n        const nextChar = prevQueue[0];\n        setDisplayText(prevText => prevText + nextChar);\n        return prevQueue.slice(1);\n      });\n    }, 30); // 30ms间隔，快速但流畅\n  }, []);\n\n  // 添加文本到队列\n  const addTextToQueue = useCallback(text => {\n    setTextQueue(prevQueue => prevQueue + text);\n\n    // 如果当前没有在打字，开始打字机效果\n    if (!typewriterTimerRef.current) {\n      startTypewriter();\n    }\n  }, [startTypewriter]);\n  const getTitle = () => {\n    var _data$content2, _data$content3;\n    if ((data === null || data === void 0 ? void 0 : (_data$content2 = data.content) === null || _data$content2 === void 0 ? void 0 : _data$content2.type) === 'search') {\n      return '搜索中...';\n    }\n    return (data === null || data === void 0 ? void 0 : (_data$content3 = data.content) === null || _data$content3 === void 0 ? void 0 : _data$content3.title) || '深度思考中...';\n  };\n  const toggleCollapse = () => {\n    const newCollapsedState = !isCollapsed;\n    setIsCollapsed(newCollapsedState);\n    collapseStateRef.current = newCollapsedState; // 同时更新ref以持久化状态\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `think-container ${isFinished ? 'finished' : ''} ${isCollapsed ? 'collapsed' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"think-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"think-title\",\n        children: getTitle()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"think-toggle-btn\",\n        onClick: toggleCollapse,\n        \"aria-label\": isCollapsed ? '展开' : '折叠',\n        \"data-symbol\": isCollapsed ? '▶' : '▼'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"think-content\",\n      children: [hasSearch && searchData && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"think-search-section\",\n        children: /*#__PURE__*/_jsxDEV(Search, {\n          data: searchData,\n          isFinished: isFinished\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this), displayText && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"think-text\",\n        children: [displayText, isTyping && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"cursor\",\n          children: \"|\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n\n// 使用React.memo优化渲染，自定义比较函数\n_s(Think, \"CFINwvu8yrM10IfJ37Eq9BGDr2g=\");\n_c = Think;\nconst MemoizedThink = /*#__PURE__*/memo(Think, (prevProps, nextProps) => {\n  var _prevProps$data, _nextProps$data;\n  // 如果组件已完成，则不需要重新渲染\n  if (prevProps.isFinished && nextProps.isFinished) {\n    return true; // 返回true表示props相同，不需要重新渲染\n  }\n\n  // 如果msg_id相同且都是完成状态，不需要重新渲染\n  if (((_prevProps$data = prevProps.data) === null || _prevProps$data === void 0 ? void 0 : _prevProps$data.msg_id) === ((_nextProps$data = nextProps.data) === null || _nextProps$data === void 0 ? void 0 : _nextProps$data.msg_id) && prevProps.isFinished && nextProps.isFinished) {\n    return true;\n  }\n\n  // 其他情况需要重新渲染\n  return false;\n});\n_c2 = MemoizedThink;\nexport default MemoizedThink;\nvar _c, _c2;\n$RefreshReg$(_c, \"Think\");\n$RefreshReg$(_c2, \"MemoizedThink\");","map":{"version":3,"names":["React","useState","useEffect","useRef","memo","Search","jsxDEV","_jsxDEV","Think","data","isFinished","onComplete","_s","displayText","setDisplayText","isTyping","setIsTyping","hasSearch","setHasSearch","searchData","setSearchData","isCollapsed","setIsCollapsed","shouldAutoCollapse","setShouldAutoCollapse","isLocked","setIsLocked","lastProcessedMsgIdRef","collapseStateRef","textQueue","setTextQueue","typewriterTimerRef","current","content","msg_id","type","prev","addTextToQueue","_data$content","is_finished","clearInterval","timer","setTimeout","clearTimeout","startTypewriter","useCallback","setInterval","prevQueue","length","nextChar","prevText","slice","text","getTitle","_data$content2","_data$content3","title","toggleCollapse","newCollapsedState","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","MemoizedThink","prevProps","nextProps","_prevProps$data","_nextProps$data","_c2","$RefreshReg$"],"sources":["/Users/tal/Desktop/streaming/frontend/src/components/Think.js"],"sourcesContent":["import React, { useState, useEffect, useRef, memo } from 'react';\nimport './Think.css';\nimport Search from './Search';\n\nconst Think = ({ data, isFinished, onComplete }) => {\n  const [displayText, setDisplayText] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [hasSearch, setHasSearch] = useState(false);\n  const [searchData, setSearchData] = useState(null);\n  const [isCollapsed, setIsCollapsed] = useState(false);\n  const [shouldAutoCollapse, setShouldAutoCollapse] = useState(false);\n  const [isLocked, setIsLocked] = useState(false); // 标记组件是否已锁定，不再响应外部更新\n  const lastProcessedMsgIdRef = useRef('');\n  const collapseStateRef = useRef(false); // 用于持久化展开/收缩状态\n  \n  // 打字机效果相关状态\n  const [textQueue, setTextQueue] = useState(''); // 待显示的文本队列\n  const typewriterTimerRef = useRef(null); // 打字机定时器\n\n  // 同步ref和state，确保状态持久化\n  useEffect(() => {\n    setIsCollapsed(collapseStateRef.current);\n  }, []);\n\n  useEffect(() => {\n    // 如果组件已锁定，不再处理新数据\n    if (isLocked) {\n      return;\n    }\n\n    if (data && data.content && data.msg_id) {\n      const content = data.content.content || '';\n      const type = data.content.type;\n      \n      // 只有当消息ID不同时才处理，避免重复处理同一消息\n      if (lastProcessedMsgIdRef.current !== data.msg_id) {\n        lastProcessedMsgIdRef.current = data.msg_id;\n        \n        // 如果遇到search类型，记录并保存search数据\n        if (type === 'search') {\n          setHasSearch(true);\n          setSearchData(data.content);\n        }\n        \n        // 处理search类型的content内容\n        if (type === 'search' && content) {\n          // 将search内容传递给Search组件进行追加\n          setSearchData(prev => ({\n            ...prev,\n            content: (prev?.content || '') + content\n          }));\n        }\n        \n        // 处理非search类型的消息\n        if (content && type !== 'search') {\n          addTextToQueue(content);\n        }\n      }\n    }\n  }, [data, isTyping, isLocked]);\n\n  useEffect(() => {\n    if (isFinished && data?.content?.is_finished) {\n      // 清理打字机定时器\n      if (typewriterTimerRef.current) {\n        clearInterval(typewriterTimerRef.current);\n        typewriterTimerRef.current = null;\n      }\n      setIsTyping(false);\n      setShouldAutoCollapse(true);\n      setIsLocked(true); // 锁定组件，不再响应外部更新\n      if (onComplete) {\n        onComplete();\n      }\n    }\n  }, [isFinished, data, onComplete]);\n\n  // 组件卸载时清理定时器\n  useEffect(() => {\n    return () => {\n      if (typewriterTimerRef.current) {\n        clearInterval(typewriterTimerRef.current);\n      }\n    };\n  }, []);\n\n  // 思考完成后自动折叠\n  useEffect(() => {\n    if (shouldAutoCollapse) {\n      const timer = setTimeout(() => {\n        setIsCollapsed(true);\n        collapseStateRef.current = true; // 同时更新ref\n        setShouldAutoCollapse(false);\n      }, 1000); // 1秒后自动折叠\n      return () => clearTimeout(timer);\n    }\n  }, [shouldAutoCollapse]);\n\n  // 逐字打字机效果\n  const startTypewriter = useCallback(() => {\n    if (typewriterTimerRef.current) {\n      clearInterval(typewriterTimerRef.current);\n    }\n    \n    setIsTyping(true);\n    \n    typewriterTimerRef.current = setInterval(() => {\n      setTextQueue(prevQueue => {\n        if (prevQueue.length === 0) {\n          setIsTyping(false);\n          clearInterval(typewriterTimerRef.current);\n          typewriterTimerRef.current = null;\n          return '';\n        }\n        \n        const nextChar = prevQueue[0];\n        setDisplayText(prevText => prevText + nextChar);\n        return prevQueue.slice(1);\n      });\n    }, 30); // 30ms间隔，快速但流畅\n  }, []);\n\n  // 添加文本到队列\n  const addTextToQueue = useCallback((text) => {\n    setTextQueue(prevQueue => prevQueue + text);\n    \n    // 如果当前没有在打字，开始打字机效果\n    if (!typewriterTimerRef.current) {\n      startTypewriter();\n    }\n  }, [startTypewriter]);\n\n  const getTitle = () => {\n    if (data?.content?.type === 'search') {\n      return '搜索中...';\n    }\n    return data?.content?.title || '深度思考中...';\n  };\n\n  const toggleCollapse = () => {\n    const newCollapsedState = !isCollapsed;\n    setIsCollapsed(newCollapsedState);\n    collapseStateRef.current = newCollapsedState; // 同时更新ref以持久化状态\n  };\n\n  return (\n    <div className={`think-container ${isFinished ? 'finished' : ''} ${isCollapsed ? 'collapsed' : ''}`}>\n      <div className=\"think-header\">\n        <div className=\"think-title\">{getTitle()}</div>\n        <button \n          className=\"think-toggle-btn\"\n          onClick={toggleCollapse}\n          aria-label={isCollapsed ? '展开' : '折叠'}\n          data-symbol={isCollapsed ? '▶' : '▼'}\n        >\n        </button>\n      </div>\n      <div className=\"think-content\">\n        {hasSearch && searchData && (\n          <div className=\"think-search-section\">\n            <Search data={searchData} isFinished={isFinished} />\n          </div>\n        )}\n      \n        {displayText && (\n          <div className=\"think-text\">\n            {displayText}\n            {isTyping && <span className=\"cursor\">|</span>}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// 使用React.memo优化渲染，自定义比较函数\nconst MemoizedThink = memo(Think, (prevProps, nextProps) => {\n  // 如果组件已完成，则不需要重新渲染\n  if (prevProps.isFinished && nextProps.isFinished) {\n    return true; // 返回true表示props相同，不需要重新渲染\n  }\n  \n  // 如果msg_id相同且都是完成状态，不需要重新渲染\n  if (prevProps.data?.msg_id === nextProps.data?.msg_id && \n      prevProps.isFinished && nextProps.isFinished) {\n    return true;\n  }\n  \n  // 其他情况需要重新渲染\n  return false;\n});\n\nexport default MemoizedThink;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}