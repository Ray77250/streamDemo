{"ast":null,"code":"import React from 'react';\nimport Step from '../components/Step';\nimport Think from '../components/Think';\nimport Text from '../components/Text';\nimport Reply from '../components/Reply';\nclass ComponentManager {\n  constructor() {\n    this.components = [];\n    this.listeners = [];\n  }\n\n  // 添加监听器\n  addListener(callback) {\n    this.listeners.push(callback);\n    return () => {\n      this.listeners = this.listeners.filter(listener => listener !== callback);\n    };\n  }\n\n  // 通知所有监听器\n  notifyListeners() {\n    this.listeners.forEach(callback => callback(this.components));\n  }\n\n  // 处理新消息\n  handleNewMessage(data) {\n    const componentType = data.type;\n    if (!['step', 'think', 'text', 'reply'].includes(componentType)) {\n      return;\n    }\n\n    // 对于text和reply类型，总是创建新组件\n    if (componentType === 'text' || componentType === 'reply') {\n      var _data$content;\n      this.components.push({\n        id: `${data.msg_id}_${Date.now()}`,\n        type: componentType,\n        data: data,\n        isFinished: ((_data$content = data.content) === null || _data$content === void 0 ? void 0 : _data$content.is_finished) || false\n      });\n    } else {\n      // 对于step和think类型，寻找最后一个未完成的同类型组件\n      let activeIndex = -1;\n      for (let i = this.components.length - 1; i >= 0; i--) {\n        if (this.components[i].type === componentType && !this.components[i].isFinished) {\n          activeIndex = i;\n          break;\n        }\n      }\n      if (activeIndex >= 0) {\n        var _data$content2;\n        // 更新现有组件\n        this.components[activeIndex] = {\n          ...this.components[activeIndex],\n          data: data,\n          isFinished: ((_data$content2 = data.content) === null || _data$content2 === void 0 ? void 0 : _data$content2.is_finished) || false\n        };\n      } else {\n        var _data$content3;\n        // 创建新组件\n        this.components.push({\n          id: `${data.msg_id}_${Date.now()}`,\n          type: componentType,\n          data: data,\n          isFinished: ((_data$content3 = data.content) === null || _data$content3 === void 0 ? void 0 : _data$content3.is_finished) || false\n        });\n      }\n    }\n    this.notifyListeners();\n  }\n\n  // 清空所有组件\n  clearComponents() {\n    this.components = [];\n    this.notifyListeners();\n  }\n\n  // 渲染组件\n  renderComponent(component) {\n    const commonProps = {\n      data: component.data,\n      isFinished: component.isFinished,\n      onComplete: () => this.handleComponentComplete(component.id)\n    };\n    switch (component.type) {\n      case 'step':\n        return /*#__PURE__*/React.createElement(Step, {\n          key: component.id,\n          ...commonProps\n        });\n      case 'think':\n        return /*#__PURE__*/React.createElement(Think, {\n          key: component.id,\n          ...commonProps\n        });\n      case 'text':\n        return /*#__PURE__*/React.createElement(Text, {\n          key: component.id,\n          ...commonProps\n        });\n      case 'reply':\n        return /*#__PURE__*/React.createElement(Reply, {\n          key: component.id,\n          ...commonProps\n        });\n      default:\n        return null;\n    }\n  }\n\n  // 处理组件完成\n  handleComponentComplete(componentId) {\n    console.log(`组件 ${componentId} 完成`);\n  }\n\n  // 获取所有组件\n  getComponents() {\n    return this.components;\n  }\n}\n\n// 创建单例实例\nconst componentManager = new ComponentManager();\nexport default componentManager;","map":{"version":3,"names":["React","Step","Think","Text","Reply","ComponentManager","constructor","components","listeners","addListener","callback","push","filter","listener","notifyListeners","forEach","handleNewMessage","data","componentType","type","includes","_data$content","id","msg_id","Date","now","isFinished","content","is_finished","activeIndex","i","length","_data$content2","_data$content3","clearComponents","renderComponent","component","commonProps","onComplete","handleComponentComplete","createElement","key","componentId","console","log","getComponents","componentManager"],"sources":["/Users/tal/Desktop/streaming/frontend/src/services/componentManager.js"],"sourcesContent":["import React from 'react';\nimport Step from '../components/Step';\nimport Think from '../components/Think';\nimport Text from '../components/Text';\nimport Reply from '../components/Reply';\n\nclass ComponentManager {\n  constructor() {\n    this.components = [];\n    this.listeners = [];\n  }\n\n  // 添加监听器\n  addListener(callback) {\n    this.listeners.push(callback);\n    return () => {\n      this.listeners = this.listeners.filter(listener => listener !== callback);\n    };\n  }\n\n  // 通知所有监听器\n  notifyListeners() {\n    this.listeners.forEach(callback => callback(this.components));\n  }\n\n  // 处理新消息\n  handleNewMessage(data) {\n    const componentType = data.type;\n    \n    if (!['step', 'think', 'text', 'reply'].includes(componentType)) {\n      return;\n    }\n\n    // 对于text和reply类型，总是创建新组件\n    if (componentType === 'text' || componentType === 'reply') {\n      this.components.push({\n        id: `${data.msg_id}_${Date.now()}`,\n        type: componentType,\n        data: data,\n        isFinished: data.content?.is_finished || false\n      });\n    } else {\n      // 对于step和think类型，寻找最后一个未完成的同类型组件\n      let activeIndex = -1;\n      for (let i = this.components.length - 1; i >= 0; i--) {\n        if (this.components[i].type === componentType && !this.components[i].isFinished) {\n          activeIndex = i;\n          break;\n        }\n      }\n\n      if (activeIndex >= 0) {\n        // 更新现有组件\n        this.components[activeIndex] = {\n          ...this.components[activeIndex],\n          data: data,\n          isFinished: data.content?.is_finished || false\n        };\n      } else {\n        // 创建新组件\n        this.components.push({\n          id: `${data.msg_id}_${Date.now()}`,\n          type: componentType,\n          data: data,\n          isFinished: data.content?.is_finished || false\n        });\n      }\n    }\n\n    this.notifyListeners();\n  }\n\n  // 清空所有组件\n  clearComponents() {\n    this.components = [];\n    this.notifyListeners();\n  }\n\n  // 渲染组件\n  renderComponent(component) {\n    const commonProps = {\n      data: component.data,\n      isFinished: component.isFinished,\n      onComplete: () => this.handleComponentComplete(component.id)\n    };\n\n    switch (component.type) {\n      case 'step':\n        return React.createElement(Step, { key: component.id, ...commonProps });\n      case 'think':\n        return React.createElement(Think, { key: component.id, ...commonProps });\n      case 'text':\n        return React.createElement(Text, { key: component.id, ...commonProps });\n      case 'reply':\n        return React.createElement(Reply, { key: component.id, ...commonProps });\n      default:\n        return null;\n    }\n  }\n\n  // 处理组件完成\n  handleComponentComplete(componentId) {\n    console.log(`组件 ${componentId} 完成`);\n  }\n\n  // 获取所有组件\n  getComponents() {\n    return this.components;\n  }\n}\n\n// 创建单例实例\nconst componentManager = new ComponentManager();\n\nexport default componentManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}