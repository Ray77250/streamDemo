{"ast":null,"code":"var _jsxFileName = \"/Users/tal/Desktop/streaming/frontend/src/components/Think.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Think.css';\nimport Search from './Search';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Think = ({\n  data,\n  isFinished,\n  onComplete\n}) => {\n  _s();\n  var _data$content4;\n  const [displayText, setDisplayText] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [showComplete, setShowComplete] = useState(false);\n  const [currentTitle, setCurrentTitle] = useState('');\n  useEffect(() => {\n    if (data && data.content) {\n      const content = data.content.content || '';\n      const title = data.content.title || '';\n      const type = data.content.type;\n      if (title && title !== currentTitle) {\n        setCurrentTitle(title);\n      }\n\n      // 只对非search类型的内容进行打字效果\n      if (content && !isTyping && type !== 'search') {\n        typeText(content);\n      }\n    }\n  }, [data]);\n  useEffect(() => {\n    var _data$content;\n    if (isFinished && data !== null && data !== void 0 && (_data$content = data.content) !== null && _data$content !== void 0 && _data$content.is_finished) {\n      setShowComplete(true);\n      setIsTyping(false);\n      if (onComplete) {\n        onComplete();\n      }\n    }\n  }, [isFinished, data, onComplete]);\n  const typeText = text => {\n    setIsTyping(true);\n    setDisplayText(prev => prev + text); // 追加文本而不是替换\n\n    // 模拟思考延迟\n    setTimeout(() => {\n      setIsTyping(false);\n    }, 100);\n  };\n  const getTitle = () => {\n    var _data$content2, _data$content3;\n    if (data !== null && data !== void 0 && (_data$content2 = data.content) !== null && _data$content2 !== void 0 && _data$content2.title) {\n      return data.content.title;\n    }\n    if ((data === null || data === void 0 ? void 0 : (_data$content3 = data.content) === null || _data$content3 === void 0 ? void 0 : _data$content3.type) === 'search') {\n      return '搜索中...';\n    }\n    return '思考中...';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `think-container ${isFinished ? 'finished' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"think-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"think-title\",\n        children: getTitle()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"think-content\",\n      children: [(data === null || data === void 0 ? void 0 : (_data$content4 = data.content) === null || _data$content4 === void 0 ? void 0 : _data$content4.type) === 'search' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"think-search-section\",\n        children: /*#__PURE__*/_jsxDEV(Search, {\n          data: data.content,\n          isFinished: isFinished\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"think-text\",\n        children: [displayText, isTyping && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"cursor\",\n          children: \"|\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(Think, \"wX7eVt8BJ2Tm/7eGl6+fw8Yu5ew=\");\n_c = Think;\nexport default Think;\nvar _c;\n$RefreshReg$(_c, \"Think\");","map":{"version":3,"names":["React","useState","useEffect","Search","jsxDEV","_jsxDEV","Think","data","isFinished","onComplete","_s","_data$content4","displayText","setDisplayText","isTyping","setIsTyping","showComplete","setShowComplete","currentTitle","setCurrentTitle","content","title","type","typeText","_data$content","is_finished","text","prev","setTimeout","getTitle","_data$content2","_data$content3","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tal/Desktop/streaming/frontend/src/components/Think.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Think.css';\nimport Search from './Search';\n\nconst Think = ({ data, isFinished, onComplete }) => {\n  const [displayText, setDisplayText] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [showComplete, setShowComplete] = useState(false);\n  const [currentTitle, setCurrentTitle] = useState('');\n\n  useEffect(() => {\n    if (data && data.content) {\n      const content = data.content.content || '';\n      const title = data.content.title || '';\n      const type = data.content.type;\n      \n      if (title && title !== currentTitle) {\n        setCurrentTitle(title);\n      }\n      \n      // 只对非search类型的内容进行打字效果\n      if (content && !isTyping && type !== 'search') {\n        typeText(content);\n      }\n    }\n  }, [data]);\n\n  useEffect(() => {\n    if (isFinished && data?.content?.is_finished) {\n      setShowComplete(true);\n      setIsTyping(false);\n      if (onComplete) {\n        onComplete();\n      }\n    }\n  }, [isFinished, data, onComplete]);\n\n  const typeText = (text) => {\n    setIsTyping(true);\n    setDisplayText(prev => prev + text); // 追加文本而不是替换\n    \n    // 模拟思考延迟\n    setTimeout(() => {\n      setIsTyping(false);\n    }, 100);\n  };\n\n  const getTitle = () => {\n    if (data?.content?.title) {\n      return data.content.title;\n    }\n    if (data?.content?.type === 'search') {\n      return '搜索中...';\n    }\n    return '思考中...';\n  };\n\n  return (\n    <div className={`think-container ${isFinished ? 'finished' : ''}`}>\n      <div className=\"think-header\">\n        <div className=\"think-title\">{getTitle()}</div>\n      </div>\n      <div className=\"think-content\">\n        {/* 如果是search类型，显示Search组件 */}\n        {data?.content?.type === 'search' && (\n          <div className=\"think-search-section\">\n            <Search data={data.content} isFinished={isFinished} />\n          </div>\n        )}\n        \n        {/* 显示思考文字内容 */}\n        <div className=\"think-text\">\n          {displayText}\n          {isTyping && <span className=\"cursor\">|</span>}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Think;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}