{"ast":null,"code":"class SSEService {\n  constructor() {\n    this.eventSource = null;\n    this.listeners = new Set();\n    this.isConnected = false;\n    this.messageCount = 0;\n  }\n  connect() {\n    if (this.eventSource) {\n      this.eventSource.close();\n    }\n    this.eventSource = new EventSource('http://localhost:3001/events');\n    this.eventSource.onopen = () => {\n      console.log('SSE连接已建立');\n      this.isConnected = true;\n      this.notifyListeners('connected', {\n        message: '连接已建立'\n      });\n    };\n    this.eventSource.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        this.messageCount++;\n        this.notifyListeners('message', data);\n      } catch (error) {\n        console.error('解析SSE消息失败:', error);\n      }\n    };\n    this.eventSource.onerror = error => {\n      console.error('SSE连接错误:', error);\n      this.isConnected = false;\n      this.notifyListeners('error', {\n        error: '连接错误'\n      });\n    };\n  }\n  async startStream(speed = 1000) {\n    if (!this.isConnected) {\n      throw new Error('请先连接SSE');\n    }\n    try {\n      const response = await fetch('http://localhost:3001/start-stream', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          speed: parseInt(speed)\n        })\n      });\n      const data = await response.json();\n      console.log('开始推送:', data);\n      return data;\n    } catch (error) {\n      console.error('开始推送失败:', error);\n      throw error;\n    }\n  }\n  async getStatus() {\n    try {\n      const response = await fetch('http://localhost:3001/status');\n      return await response.json();\n    } catch (error) {\n      console.error('获取状态失败:', error);\n      throw error;\n    }\n  }\n  addListener(callback) {\n    this.listeners.add(callback);\n    return () => this.listeners.delete(callback);\n  }\n  notifyListeners(eventType, data) {\n    this.listeners.forEach(callback => {\n      try {\n        callback(eventType, data);\n      } catch (error) {\n        console.error('通知监听器失败:', error);\n      }\n    });\n  }\n  getConnectionStatus() {\n    return this.isConnected;\n  }\n  getMessageCount() {\n    return this.messageCount;\n  }\n}\n\n// 创建单例实例\nconst sseService = new SSEService();\nexport default sseService;","map":{"version":3,"names":["SSEService","constructor","eventSource","listeners","Set","isConnected","messageCount","connect","close","EventSource","onopen","console","log","notifyListeners","message","onmessage","event","data","JSON","parse","error","onerror","startStream","speed","Error","response","fetch","method","headers","body","stringify","parseInt","json","getStatus","addListener","callback","add","delete","eventType","forEach","getConnectionStatus","getMessageCount","sseService"],"sources":["/Users/tal/Desktop/streaming/frontend/src/services/sseService.js"],"sourcesContent":["class SSEService {\n  constructor() {\n    this.eventSource = null;\n    this.listeners = new Set();\n    this.isConnected = false;\n    this.messageCount = 0;\n  }\n\n  connect() {\n    if (this.eventSource) {\n      this.eventSource.close();\n    }\n\n    this.eventSource = new EventSource('http://localhost:3001/events');\n    \n    this.eventSource.onopen = () => {\n      console.log('SSE连接已建立');\n      this.isConnected = true;\n      this.notifyListeners('connected', { message: '连接已建立' });\n    };\n\n    this.eventSource.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        this.messageCount++;\n        this.notifyListeners('message', data);\n      } catch (error) {\n        console.error('解析SSE消息失败:', error);\n      }\n    };\n\n    this.eventSource.onerror = (error) => {\n      console.error('SSE连接错误:', error);\n      this.isConnected = false;\n      this.notifyListeners('error', { error: '连接错误' });\n    };\n  }\n\n\n  async startStream(speed = 1000) {\n    if (!this.isConnected) {\n      throw new Error('请先连接SSE');\n    }\n\n    try {\n      const response = await fetch('http://localhost:3001/start-stream', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ speed: parseInt(speed) })\n      });\n      const data = await response.json();\n      console.log('开始推送:', data);\n      return data;\n    } catch (error) {\n      console.error('开始推送失败:', error);\n      throw error;\n    }\n  }\n\n\n  async getStatus() {\n    try {\n      const response = await fetch('http://localhost:3001/status');\n      return await response.json();\n    } catch (error) {\n      console.error('获取状态失败:', error);\n      throw error;\n    }\n  }\n\n  addListener(callback) {\n    this.listeners.add(callback);\n    return () => this.listeners.delete(callback);\n  }\n\n  notifyListeners(eventType, data) {\n    this.listeners.forEach(callback => {\n      try {\n        callback(eventType, data);\n      } catch (error) {\n        console.error('通知监听器失败:', error);\n      }\n    });\n  }\n\n  getConnectionStatus() {\n    return this.isConnected;\n  }\n\n  getMessageCount() {\n    return this.messageCount;\n  }\n}\n\n// 创建单例实例\nconst sseService = new SSEService();\nexport default sseService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}