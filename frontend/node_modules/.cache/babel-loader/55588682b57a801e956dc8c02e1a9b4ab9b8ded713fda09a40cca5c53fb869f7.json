{"ast":null,"code":"var _jsxFileName = \"/Users/tal/Desktop/streaming/frontend/src/components/Think.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Think.css';\nimport Search from './Search';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Think = ({\n  data,\n  isFinished,\n  onComplete\n}) => {\n  _s();\n  const [displayText, setDisplayText] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [hasSearch, setHasSearch] = useState(false);\n  const [searchData, setSearchData] = useState(null);\n  const [isCollapsed, setIsCollapsed] = useState(false);\n  const lastProcessedMsgIdRef = useRef('');\n  useEffect(() => {\n    if (data && data.content && data.msg_id) {\n      const content = data.content.content || '';\n      const type = data.content.type;\n\n      // 只有当消息ID不同时才处理，避免重复处理同一消息\n      if (lastProcessedMsgIdRef.current !== data.msg_id) {\n        lastProcessedMsgIdRef.current = data.msg_id;\n\n        // 如果遇到search类型，记录并保存search数据\n        if (type === 'search') {\n          setHasSearch(true);\n          setSearchData(data.content);\n        }\n\n        // 处理search类型的content内容\n        if (type === 'search' && content) {\n          // 将search内容传递给Search组件进行追加\n          setSearchData(prev => ({\n            ...prev,\n            content: ((prev === null || prev === void 0 ? void 0 : prev.content) || '') + content\n          }));\n        }\n\n        // 处理非search类型的消息\n        if (content && !isTyping && type !== 'search') {\n          typeText(content);\n        }\n      }\n    }\n  }, [data, isTyping]);\n  useEffect(() => {\n    var _data$content;\n    if (isFinished && data !== null && data !== void 0 && (_data$content = data.content) !== null && _data$content !== void 0 && _data$content.is_finished) {\n      setIsTyping(false);\n      // 思考完成后自动收缩\n      setTimeout(() => {\n        setIsCollapsed(true);\n      }, 1000); // 延迟1秒后自动收缩\n      if (onComplete) {\n        onComplete();\n      }\n    }\n  }, [isFinished, data, onComplete]);\n  const typeText = text => {\n    setIsTyping(true);\n    setDisplayText(prev => prev + text); // 追加文本而不是替换\n\n    // 立即完成，无延迟\n    setIsTyping(false);\n  };\n  const getTitle = () => {\n    var _data$content2, _data$content3;\n    if ((data === null || data === void 0 ? void 0 : (_data$content2 = data.content) === null || _data$content2 === void 0 ? void 0 : _data$content2.type) === 'search') {\n      return '搜索中...';\n    }\n    return (data === null || data === void 0 ? void 0 : (_data$content3 = data.content) === null || _data$content3 === void 0 ? void 0 : _data$content3.title) || '深度思考中...';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `think-container ${isFinished ? 'finished' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"think-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"think-title\",\n        children: getTitle()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"think-content\",\n      children: [hasSearch && searchData && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"think-search-section\",\n        children: /*#__PURE__*/_jsxDEV(Search, {\n          data: searchData,\n          isFinished: isFinished\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), displayText && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"think-text\",\n        children: [displayText, isTyping && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"cursor\",\n          children: \"|\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(Think, \"q6T6wzY1pg90rkaNCaFYlt+eEDI=\");\n_c = Think;\nexport default Think;\nvar _c;\n$RefreshReg$(_c, \"Think\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Search","jsxDEV","_jsxDEV","Think","data","isFinished","onComplete","_s","displayText","setDisplayText","isTyping","setIsTyping","hasSearch","setHasSearch","searchData","setSearchData","isCollapsed","setIsCollapsed","lastProcessedMsgIdRef","content","msg_id","type","current","prev","typeText","_data$content","is_finished","setTimeout","text","getTitle","_data$content2","_data$content3","title","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tal/Desktop/streaming/frontend/src/components/Think.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './Think.css';\nimport Search from './Search';\n\nconst Think = ({ data, isFinished, onComplete }) => {\n  const [displayText, setDisplayText] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [hasSearch, setHasSearch] = useState(false);\n  const [searchData, setSearchData] = useState(null);\n  const [isCollapsed, setIsCollapsed] = useState(false);\n  const lastProcessedMsgIdRef = useRef('');\n\n  useEffect(() => {\n    if (data && data.content && data.msg_id) {\n      const content = data.content.content || '';\n      const type = data.content.type;\n      \n      // 只有当消息ID不同时才处理，避免重复处理同一消息\n      if (lastProcessedMsgIdRef.current !== data.msg_id) {\n        lastProcessedMsgIdRef.current = data.msg_id;\n        \n        // 如果遇到search类型，记录并保存search数据\n        if (type === 'search') {\n          setHasSearch(true);\n          setSearchData(data.content);\n        }\n        \n        // 处理search类型的content内容\n        if (type === 'search' && content) {\n          // 将search内容传递给Search组件进行追加\n          setSearchData(prev => ({\n            ...prev,\n            content: (prev?.content || '') + content\n          }));\n        }\n        \n        // 处理非search类型的消息\n        if (content && !isTyping && type !== 'search') {\n          typeText(content);\n        }\n      }\n    }\n  }, [data, isTyping]);\n\n  useEffect(() => {\n    if (isFinished && data?.content?.is_finished) {\n      setIsTyping(false);\n      // 思考完成后自动收缩\n      setTimeout(() => {\n        setIsCollapsed(true);\n      }, 1000); // 延迟1秒后自动收缩\n      if (onComplete) {\n        onComplete();\n      }\n    }\n  }, [isFinished, data, onComplete]);\n\n  const typeText = (text) => {\n    setIsTyping(true);\n    setDisplayText(prev => prev + text); // 追加文本而不是替换\n    \n    // 立即完成，无延迟\n    setIsTyping(false);\n  };\n\n  const getTitle = () => {\n    if (data?.content?.type === 'search') {\n      return '搜索中...';\n    }\n    return data?.content?.title || '深度思考中...';\n  };\n\n  return (\n    <div className={`think-container ${isFinished ? 'finished' : ''}`}>\n      <div className=\"think-header\">\n        <div className=\"think-title\">{getTitle()}</div>\n      </div>\n      <div className=\"think-content\">\n        {hasSearch && searchData && (\n          <div className=\"think-search-section\">\n            <Search data={searchData} isFinished={isFinished} />\n          </div>\n        )}\n      \n        {displayText && (\n          <div className=\"think-text\">\n            {displayText}\n            {isTyping && <span className=\"cursor\">|</span>}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Think;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}