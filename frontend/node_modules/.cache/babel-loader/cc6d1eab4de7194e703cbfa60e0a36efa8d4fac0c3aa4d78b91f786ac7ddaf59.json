{"ast":null,"code":"var _jsxFileName = \"/Users/tal/Desktop/streaming/frontend/src/components/Think.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, memo } from 'react';\nimport './Think.css';\nimport Search from './Search';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Think = ({\n  data,\n  isFinished,\n  onComplete\n}) => {\n  _s();\n  const [displayText, setDisplayText] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [hasSearch, setHasSearch] = useState(false);\n  const [searchData, setSearchData] = useState(null);\n  const [isCollapsed, setIsCollapsed] = useState(false);\n  const [shouldAutoCollapse, setShouldAutoCollapse] = useState(false);\n  const [isLocked, setIsLocked] = useState(false); // 标记组件是否已锁定，不再响应外部更新\n  const lastProcessedMsgIdRef = useRef('');\n  const collapseStateRef = useRef(false); // 用于持久化展开/收缩状态\n\n  // 同步ref和state，确保状态持久化\n  useEffect(() => {\n    setIsCollapsed(collapseStateRef.current);\n  }, []);\n  useEffect(() => {\n    // 如果组件已锁定，不再处理新数据\n    if (isLocked) {\n      return;\n    }\n    if (data && data.content && data.msg_id) {\n      const content = data.content.content || '';\n      const type = data.content.type;\n\n      // 只有当消息ID不同时才处理，避免重复处理同一消息\n      if (lastProcessedMsgIdRef.current !== data.msg_id) {\n        lastProcessedMsgIdRef.current = data.msg_id;\n\n        // 如果遇到search类型，记录并保存search数据\n        if (type === 'search') {\n          setHasSearch(true);\n          setSearchData(data.content);\n        }\n\n        // 处理search类型的content内容\n        if (type === 'search' && content) {\n          // 将search内容传递给Search组件进行追加\n          setSearchData(prev => ({\n            ...prev,\n            content: ((prev === null || prev === void 0 ? void 0 : prev.content) || '') + content\n          }));\n        }\n\n        // 处理非search类型的消息\n        if (content && !isTyping && type !== 'search') {\n          typeText(content);\n        }\n      }\n    }\n  }, [data, isTyping, isLocked]);\n  useEffect(() => {\n    var _data$content;\n    if (isFinished && data !== null && data !== void 0 && (_data$content = data.content) !== null && _data$content !== void 0 && _data$content.is_finished) {\n      setIsTyping(false);\n      setShouldAutoCollapse(true);\n      setIsLocked(true); // 锁定组件，不再响应外部更新\n      if (onComplete) {\n        onComplete();\n      }\n    }\n  }, [isFinished, data, onComplete]);\n\n  // 思考完成后自动折叠\n  useEffect(() => {\n    if (shouldAutoCollapse) {\n      const timer = setTimeout(() => {\n        setIsCollapsed(true);\n        collapseStateRef.current = true; // 同时更新ref\n        setShouldAutoCollapse(false);\n      }, 1000); // 1秒后自动折叠\n      return () => clearTimeout(timer);\n    }\n  }, [shouldAutoCollapse]);\n  const typeText = text => {\n    setIsTyping(true);\n    setDisplayText(prev => prev + text); // 追加文本而不是替换\n\n    // 立即完成，无延迟\n    setIsTyping(false);\n  };\n  const getTitle = () => {\n    var _data$content2, _data$content3;\n    if ((data === null || data === void 0 ? void 0 : (_data$content2 = data.content) === null || _data$content2 === void 0 ? void 0 : _data$content2.type) === 'search') {\n      return '搜索中...';\n    }\n    return (data === null || data === void 0 ? void 0 : (_data$content3 = data.content) === null || _data$content3 === void 0 ? void 0 : _data$content3.title) || '深度思考中...';\n  };\n  const toggleCollapse = () => {\n    const newCollapsedState = !isCollapsed;\n    setIsCollapsed(newCollapsedState);\n    collapseStateRef.current = newCollapsedState; // 同时更新ref以持久化状态\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `think-container ${isFinished ? 'finished' : ''} ${isCollapsed ? 'collapsed' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"think-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"think-title\",\n        children: getTitle()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"think-toggle-btn\",\n        onClick: toggleCollapse,\n        \"aria-label\": isCollapsed ? '展开' : '折叠',\n        \"data-symbol\": isCollapsed ? '▶' : '▼'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"think-content\",\n      children: [hasSearch && searchData && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"think-search-section\",\n        children: /*#__PURE__*/_jsxDEV(Search, {\n          data: searchData,\n          isFinished: isFinished\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this), displayText && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"think-text\",\n        children: [displayText, isTyping && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"cursor\",\n          children: \"|\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n\n// 使用React.memo优化渲染，自定义比较函数\n_s(Think, \"QJQulO1XBgLWoc5YavIGMTursL8=\");\n_c = Think;\nconst MemoizedThink = /*#__PURE__*/memo(Think, (prevProps, nextProps) => {\n  var _prevProps$data, _nextProps$data;\n  // 如果组件已完成，则不需要重新渲染\n  if (prevProps.isFinished && nextProps.isFinished) {\n    return true;\n  }\n\n  // 如果msg_id相同且都是完成状态，不需要重新渲染\n  if (((_prevProps$data = prevProps.data) === null || _prevProps$data === void 0 ? void 0 : _prevProps$data.msg_id) === ((_nextProps$data = nextProps.data) === null || _nextProps$data === void 0 ? void 0 : _nextProps$data.msg_id) && prevProps.isFinished && nextProps.isFinished) {\n    return true;\n  }\n\n  // 其他情况需要重新渲染\n  return false;\n});\n_c2 = MemoizedThink;\nexport default MemoizedThink;\nvar _c, _c2;\n$RefreshReg$(_c, \"Think\");\n$RefreshReg$(_c2, \"MemoizedThink\");","map":{"version":3,"names":["React","useState","useEffect","useRef","memo","Search","jsxDEV","_jsxDEV","Think","data","isFinished","onComplete","_s","displayText","setDisplayText","isTyping","setIsTyping","hasSearch","setHasSearch","searchData","setSearchData","isCollapsed","setIsCollapsed","shouldAutoCollapse","setShouldAutoCollapse","isLocked","setIsLocked","lastProcessedMsgIdRef","collapseStateRef","current","content","msg_id","type","prev","typeText","_data$content","is_finished","timer","setTimeout","clearTimeout","text","getTitle","_data$content2","_data$content3","title","toggleCollapse","newCollapsedState","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","MemoizedThink","prevProps","nextProps","_prevProps$data","_nextProps$data","_c2","$RefreshReg$"],"sources":["/Users/tal/Desktop/streaming/frontend/src/components/Think.js"],"sourcesContent":["import React, { useState, useEffect, useRef, memo } from 'react';\nimport './Think.css';\nimport Search from './Search';\n\nconst Think = ({ data, isFinished, onComplete }) => {\n  const [displayText, setDisplayText] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [hasSearch, setHasSearch] = useState(false);\n  const [searchData, setSearchData] = useState(null);\n  const [isCollapsed, setIsCollapsed] = useState(false);\n  const [shouldAutoCollapse, setShouldAutoCollapse] = useState(false);\n  const [isLocked, setIsLocked] = useState(false); // 标记组件是否已锁定，不再响应外部更新\n  const lastProcessedMsgIdRef = useRef('');\n  const collapseStateRef = useRef(false); // 用于持久化展开/收缩状态\n\n  // 同步ref和state，确保状态持久化\n  useEffect(() => {\n    setIsCollapsed(collapseStateRef.current);\n  }, []);\n\n  useEffect(() => {\n    // 如果组件已锁定，不再处理新数据\n    if (isLocked) {\n      return;\n    }\n\n    if (data && data.content && data.msg_id) {\n      const content = data.content.content || '';\n      const type = data.content.type;\n      \n      // 只有当消息ID不同时才处理，避免重复处理同一消息\n      if (lastProcessedMsgIdRef.current !== data.msg_id) {\n        lastProcessedMsgIdRef.current = data.msg_id;\n        \n        // 如果遇到search类型，记录并保存search数据\n        if (type === 'search') {\n          setHasSearch(true);\n          setSearchData(data.content);\n        }\n        \n        // 处理search类型的content内容\n        if (type === 'search' && content) {\n          // 将search内容传递给Search组件进行追加\n          setSearchData(prev => ({\n            ...prev,\n            content: (prev?.content || '') + content\n          }));\n        }\n        \n        // 处理非search类型的消息\n        if (content && !isTyping && type !== 'search') {\n          typeText(content);\n        }\n      }\n    }\n  }, [data, isTyping, isLocked]);\n\n  useEffect(() => {\n    if (isFinished && data?.content?.is_finished) {\n      setIsTyping(false);\n      setShouldAutoCollapse(true);\n      setIsLocked(true); // 锁定组件，不再响应外部更新\n      if (onComplete) {\n        onComplete();\n      }\n    }\n  }, [isFinished, data, onComplete]);\n\n  // 思考完成后自动折叠\n  useEffect(() => {\n    if (shouldAutoCollapse) {\n      const timer = setTimeout(() => {\n        setIsCollapsed(true);\n        collapseStateRef.current = true; // 同时更新ref\n        setShouldAutoCollapse(false);\n      }, 1000); // 1秒后自动折叠\n      return () => clearTimeout(timer);\n    }\n  }, [shouldAutoCollapse]);\n\n  const typeText = (text) => {\n    setIsTyping(true);\n    setDisplayText(prev => prev + text); // 追加文本而不是替换\n    \n    // 立即完成，无延迟\n    setIsTyping(false);\n  };\n\n  const getTitle = () => {\n    if (data?.content?.type === 'search') {\n      return '搜索中...';\n    }\n    return data?.content?.title || '深度思考中...';\n  };\n\n  const toggleCollapse = () => {\n    const newCollapsedState = !isCollapsed;\n    setIsCollapsed(newCollapsedState);\n    collapseStateRef.current = newCollapsedState; // 同时更新ref以持久化状态\n  };\n\n  return (\n    <div className={`think-container ${isFinished ? 'finished' : ''} ${isCollapsed ? 'collapsed' : ''}`}>\n      <div className=\"think-header\">\n        <div className=\"think-title\">{getTitle()}</div>\n        <button \n          className=\"think-toggle-btn\"\n          onClick={toggleCollapse}\n          aria-label={isCollapsed ? '展开' : '折叠'}\n          data-symbol={isCollapsed ? '▶' : '▼'}\n        >\n        </button>\n      </div>\n      <div className=\"think-content\">\n        {hasSearch && searchData && (\n          <div className=\"think-search-section\">\n            <Search data={searchData} isFinished={isFinished} />\n          </div>\n        )}\n      \n        {displayText && (\n          <div className=\"think-text\">\n            {displayText}\n            {isTyping && <span className=\"cursor\">|</span>}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// 使用React.memo优化渲染，自定义比较函数\nconst MemoizedThink = memo(Think, (prevProps, nextProps) => {\n  // 如果组件已完成，则不需要重新渲染\n  if (prevProps.isFinished && nextProps.isFinished) {\n    return true; \n  }\n  \n  // 如果msg_id相同且都是完成状态，不需要重新渲染\n  if (prevProps.data?.msg_id === nextProps.data?.msg_id && \n      prevProps.isFinished && nextProps.isFinished) {\n    return true;\n  }\n  \n  // 其他情况需要重新渲染\n  return false;\n});\n\nexport default MemoizedThink;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}