{"ast":null,"code":"var _jsxFileName = \"/Users/tal/Desktop/streaming/frontend/src/components/Text.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Text.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Text = ({\n  data,\n  isFinished,\n  onComplete\n}) => {\n  _s();\n  const [displayText, setDisplayText] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const lastProcessedMsgIdRef = useRef('');\n\n  // 打字机效果相关状态\n  const [textQueue, setTextQueue] = useState(''); // 待显示的文本队列\n  const typewriterTimerRef = useRef(null); // 打字机定时器\n\n  useEffect(() => {\n    if (data && data.content && data.msg_id) {\n      const content = data.content.content || '';\n\n      // 只有当消息ID不同时才处理，避免重复处理同一消息\n      if (content && lastProcessedMsgIdRef.current !== data.msg_id) {\n        lastProcessedMsgIdRef.current = data.msg_id;\n        addTextToQueue(content);\n      }\n    }\n  }, [data]);\n  useEffect(() => {\n    var _data$content;\n    if (isFinished && data !== null && data !== void 0 && (_data$content = data.content) !== null && _data$content !== void 0 && _data$content.is_finished) {\n      setIsTyping(false);\n      if (onComplete) {\n        onComplete();\n      }\n    }\n  }, [isFinished, data, onComplete]);\n  const typeText = text => {\n    setIsTyping(true);\n    setDisplayText(prev => prev + text); // 追加文本而不是替换\n\n    // 短暂延迟以显示打字效果，然后立即完成\n    setTimeout(() => {\n      setIsTyping(false);\n    }, 50);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `text-container ${isFinished ? 'finished' : ''}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-output\",\n      children: [displayText, isTyping && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"cursor\",\n        children: \"|\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(Text, \"IhdhBNXjpwU1iYdAhyf/JhN0AX8=\");\n_c = Text;\nexport default Text;\nvar _c;\n$RefreshReg$(_c, \"Text\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Text","data","isFinished","onComplete","_s","displayText","setDisplayText","isTyping","setIsTyping","lastProcessedMsgIdRef","textQueue","setTextQueue","typewriterTimerRef","content","msg_id","current","addTextToQueue","_data$content","is_finished","typeText","text","prev","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tal/Desktop/streaming/frontend/src/components/Text.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './Text.css';\n\nconst Text = ({ data, isFinished, onComplete }) => {\n  const [displayText, setDisplayText] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const lastProcessedMsgIdRef = useRef('');\n  \n  // 打字机效果相关状态\n  const [textQueue, setTextQueue] = useState(''); // 待显示的文本队列\n  const typewriterTimerRef = useRef(null); // 打字机定时器\n\n  useEffect(() => {\n    if (data && data.content && data.msg_id) {\n      const content = data.content.content || '';\n      \n      // 只有当消息ID不同时才处理，避免重复处理同一消息\n      if (content && lastProcessedMsgIdRef.current !== data.msg_id) {\n        lastProcessedMsgIdRef.current = data.msg_id;\n        addTextToQueue(content);\n      }\n    }\n  }, [data]);\n\n  useEffect(() => {\n    if (isFinished && data?.content?.is_finished) {\n      setIsTyping(false);\n      if (onComplete) {\n        onComplete();\n      }\n    }\n  }, [isFinished, data, onComplete]);\n\n  const typeText = (text) => {\n    setIsTyping(true);\n    setDisplayText(prev => prev + text); // 追加文本而不是替换\n    \n    // 短暂延迟以显示打字效果，然后立即完成\n    setTimeout(() => {\n      setIsTyping(false);\n    }, 50);\n  };\n\n  return (\n    <div className={`text-container ${isFinished ? 'finished' : ''}`}>\n      <div className=\"text-output\">\n        {displayText}\n        {isTyping && <span className=\"cursor\">|</span>}\n      </div>\n    </div>\n  );\n};\n\nexport default Text;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,IAAI,GAAGA,CAAC;EAAEC,IAAI;EAAEC,UAAU;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EACjD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAMc,qBAAqB,GAAGZ,MAAM,CAAC,EAAE,CAAC;;EAExC;EACA,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAChD,MAAMiB,kBAAkB,GAAGf,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEzCD,SAAS,CAAC,MAAM;IACd,IAAIK,IAAI,IAAIA,IAAI,CAACY,OAAO,IAAIZ,IAAI,CAACa,MAAM,EAAE;MACvC,MAAMD,OAAO,GAAGZ,IAAI,CAACY,OAAO,CAACA,OAAO,IAAI,EAAE;;MAE1C;MACA,IAAIA,OAAO,IAAIJ,qBAAqB,CAACM,OAAO,KAAKd,IAAI,CAACa,MAAM,EAAE;QAC5DL,qBAAqB,CAACM,OAAO,GAAGd,IAAI,CAACa,MAAM;QAC3CE,cAAc,CAACH,OAAO,CAAC;MACzB;IACF;EACF,CAAC,EAAE,CAACZ,IAAI,CAAC,CAAC;EAEVL,SAAS,CAAC,MAAM;IAAA,IAAAqB,aAAA;IACd,IAAIf,UAAU,IAAID,IAAI,aAAJA,IAAI,gBAAAgB,aAAA,GAAJhB,IAAI,CAAEY,OAAO,cAAAI,aAAA,eAAbA,aAAA,CAAeC,WAAW,EAAE;MAC5CV,WAAW,CAAC,KAAK,CAAC;MAClB,IAAIL,UAAU,EAAE;QACdA,UAAU,CAAC,CAAC;MACd;IACF;EACF,CAAC,EAAE,CAACD,UAAU,EAAED,IAAI,EAAEE,UAAU,CAAC,CAAC;EAElC,MAAMgB,QAAQ,GAAIC,IAAI,IAAK;IACzBZ,WAAW,CAAC,IAAI,CAAC;IACjBF,cAAc,CAACe,IAAI,IAAIA,IAAI,GAAGD,IAAI,CAAC,CAAC,CAAC;;IAErC;IACAE,UAAU,CAAC,MAAM;MACfd,WAAW,CAAC,KAAK,CAAC;IACpB,CAAC,EAAE,EAAE,CAAC;EACR,CAAC;EAED,oBACET,OAAA;IAAKwB,SAAS,EAAE,kBAAkBrB,UAAU,GAAG,UAAU,GAAG,EAAE,EAAG;IAAAsB,QAAA,eAC/DzB,OAAA;MAAKwB,SAAS,EAAC,aAAa;MAAAC,QAAA,GACzBnB,WAAW,EACXE,QAAQ,iBAAIR,OAAA;QAAMwB,SAAS,EAAC,QAAQ;QAAAC,QAAA,EAAC;MAAC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACxB,EAAA,CAhDIJ,IAAI;AAAA6B,EAAA,GAAJ7B,IAAI;AAkDV,eAAeA,IAAI;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}