{"ast":null,"code":"import React from 'react';\nimport Step from '../components/Step';\nimport Think from '../components/Think';\nimport Text from '../components/Text';\nimport Reply from '../components/Reply';\nclass ComponentManager {\n  constructor() {\n    this.components = [];\n    this.listeners = [];\n  }\n\n  // 添加监听器\n  addListener(callback) {\n    this.listeners.push(callback);\n    return () => {\n      this.listeners = this.listeners.filter(listener => listener !== callback);\n    };\n  }\n\n  // 通知所有监听器\n  notifyListeners() {\n    this.listeners.forEach(callback => callback(this.components));\n  }\n\n  // 处理新消息\n  handleNewMessage(data) {\n    const componentType = data.type;\n    if (!['step', 'think', 'text'].includes(componentType)) {\n      return;\n    }\n\n    // 找到最后一个未完成的同类型组件\n    let activeIndex = -1;\n    for (let i = this.components.length - 1; i >= 0; i--) {\n      if (this.components[i].type === componentType && !this.components[i].isFinished) {\n        activeIndex = i;\n        break;\n      }\n    }\n    if (activeIndex >= 0) {\n      var _data$content;\n      // 更新现有组件\n      this.components[activeIndex] = {\n        ...this.components[activeIndex],\n        data: data,\n        isFinished: ((_data$content = data.content) === null || _data$content === void 0 ? void 0 : _data$content.is_finished) || false\n      };\n    } else {\n      var _data$content2;\n      // 创建新组件\n      this.components.push({\n        id: `${data.msg_id}_${Date.now()}`,\n        type: componentType,\n        data: data,\n        isFinished: ((_data$content2 = data.content) === null || _data$content2 === void 0 ? void 0 : _data$content2.is_finished) || false\n      });\n    }\n    this.notifyListeners();\n  }\n\n  // 清空所有组件\n  clearComponents() {\n    this.components = [];\n    this.notifyListeners();\n  }\n\n  // 渲染组件\n  renderComponent(component) {\n    const commonProps = {\n      data: component.data,\n      isFinished: component.isFinished,\n      onComplete: () => this.handleComponentComplete(component.id)\n    };\n    switch (component.type) {\n      case 'step':\n        return /*#__PURE__*/React.createElement(Step, {\n          key: component.id,\n          ...commonProps\n        });\n      case 'think':\n        return /*#__PURE__*/React.createElement(Think, {\n          key: component.id,\n          ...commonProps\n        });\n      case 'text':\n        return /*#__PURE__*/React.createElement(Text, {\n          key: component.id,\n          ...commonProps\n        });\n      default:\n        return null;\n    }\n  }\n\n  // 处理组件完成\n  handleComponentComplete(componentId) {\n    console.log(`组件 ${componentId} 完成`);\n  }\n\n  // 获取所有组件\n  getComponents() {\n    return this.components;\n  }\n}\n\n// 创建单例实例\nconst componentManager = new ComponentManager();\nexport default componentManager;","map":{"version":3,"names":["React","Step","Think","Text","Reply","ComponentManager","constructor","components","listeners","addListener","callback","push","filter","listener","notifyListeners","forEach","handleNewMessage","data","componentType","type","includes","activeIndex","i","length","isFinished","_data$content","content","is_finished","_data$content2","id","msg_id","Date","now","clearComponents","renderComponent","component","commonProps","onComplete","handleComponentComplete","createElement","key","componentId","console","log","getComponents","componentManager"],"sources":["/Users/tal/Desktop/streaming/frontend/src/services/componentManager.js"],"sourcesContent":["import React from 'react';\nimport Step from '../components/Step';\nimport Think from '../components/Think';\nimport Text from '../components/Text';\nimport Reply from '../components/Reply';\n\nclass ComponentManager {\n  constructor() {\n    this.components = [];\n    this.listeners = [];\n  }\n\n  // 添加监听器\n  addListener(callback) {\n    this.listeners.push(callback);\n    return () => {\n      this.listeners = this.listeners.filter(listener => listener !== callback);\n    };\n  }\n\n  // 通知所有监听器\n  notifyListeners() {\n    this.listeners.forEach(callback => callback(this.components));\n  }\n\n  // 处理新消息\n  handleNewMessage(data) {\n    const componentType = data.type;\n    \n    if (!['step', 'think', 'text'].includes(componentType)) {\n      return;\n    }\n\n    // 找到最后一个未完成的同类型组件\n    let activeIndex = -1;\n    for (let i = this.components.length - 1; i >= 0; i--) {\n      if (this.components[i].type === componentType && !this.components[i].isFinished) {\n        activeIndex = i;\n        break;\n      }\n    }\n\n    if (activeIndex >= 0) {\n      // 更新现有组件\n      this.components[activeIndex] = {\n        ...this.components[activeIndex],\n        data: data,\n        isFinished: data.content?.is_finished || false\n      };\n    } else {\n      // 创建新组件\n      this.components.push({\n        id: `${data.msg_id}_${Date.now()}`,\n        type: componentType,\n        data: data,\n        isFinished: data.content?.is_finished || false\n      });\n    }\n\n    this.notifyListeners();\n  }\n\n  // 清空所有组件\n  clearComponents() {\n    this.components = [];\n    this.notifyListeners();\n  }\n\n  // 渲染组件\n  renderComponent(component) {\n    const commonProps = {\n      data: component.data,\n      isFinished: component.isFinished,\n      onComplete: () => this.handleComponentComplete(component.id)\n    };\n\n    switch (component.type) {\n      case 'step':\n        return React.createElement(Step, { key: component.id, ...commonProps });\n      case 'think':\n        return React.createElement(Think, { key: component.id, ...commonProps });\n      case 'text':\n        return React.createElement(Text, { key: component.id, ...commonProps });\n      default:\n        return null;\n    }\n  }\n\n  // 处理组件完成\n  handleComponentComplete(componentId) {\n    console.log(`组件 ${componentId} 完成`);\n  }\n\n  // 获取所有组件\n  getComponents() {\n    return this.components;\n  }\n}\n\n// 创建单例实例\nconst componentManager = new ComponentManager();\n\nexport default componentManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}